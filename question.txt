BucketList Application API
​
Requirements
To complete this checkpoint you must have completed Modules 5, 6 and 7.
​
Problem Description
In this exercise you will be required to create a Flask API for a bucket list service. Specification for the API is shown below. You may use any database you prefer for this assignment.
​
EndPoint
Functionality
POST /auth/login
Logs a user in
GET /auth/logout
Logs a user out
POST /bucketlists/
Create a new bucket list
GET /bucketlists/
List all the created bucket lists
GET /bucketlists/<id>
Get single bucket list
PUT /bucketlists/<id>
Update this bucket list
DELETE /bucketlists/<id>
Delete this single bucket list
POST /bucketlists/<id>/items/
Create a new item in bucket list
PUT /bucketlists/<id>/items/<item_id>
Update a bucket list item
DELETE /bucketlists/<id>/items/<item_id>
Delete an item in a bucket list
​
​

Task 0 - Create API
In this task you are required to create the API described above using Flask. The JSON data model for a bucket list and a bucket list item is shown below.
​
{
	id: 1,
	name: “BucketList1”,
	items: [
		{
id: 1,
name: “I need to do X”,
date_created: “2015-08-12 11:57:23”,
date_modified: “2015-08-12 11:57:23”,
done: False
}
]
	date_created: “2015-08-12 11:57:23”,
	date_modified: “2015-08-12 11:57:23”
	created_by: “1113456”
}
​
Task 1 - Implement Token Based Authentication
For this task, you are required to implement Token Based Authentication for the API such that some methods are not accessible via unauthenticated users. Access control mapping is listed below.
​
EndPoint
Public Access
POST /auth/login
TRUE
GET /auth/logout
FALSE
POST /bucketlists/
FALSE
GET /bucketlists/
FALSE
GET /bucketlists/<id>
FALSE
PUT /bucketlists/<id>
FALSE
DELETE /bucketlists/<id>
FALSE
POST /bucketlists/<id>/items/
FALSE
PUT /bucketlists/<id>/items/<item_id>
FALSE
DELETE /bucketlists/<id>/items/<item_id>
FALSE
​
Task 2 - Implement Pagination on your API
For this task, you are required to implement pagination on your API such that users can specify the number of results they would like to have via a GET parameter limit. The default number of results is 20 and the maximum number of results is 100.
​
Request
GET http://localhost:5555/bucketlists?limit=20
​
Response
20 bucket list records belonging to the logged in user.
​
Task 3 - Implement Searching by name
For this task, you are required to implement searching for bucket lists based on the name using a GET parameter q.
​
Request
GET http://localhost:5555/bucketlists?q=bucket1
​
Response
Bucket lists with the string “bucket1” in their name.
​
For this exercise, take care to make use of RESTful API design best practices.

Assessment Rubric
​
Criterion
Does not Meet Expectation
Meets Expectations
Exceed Expectations
Code Functionality
The code does not work in accordance with the ideas in the problem definition.
The code meets all the requirements listed in the problem definition.
The code handles more cases than specified in the problem definition.
Comments
Solution is not commented.
Solution contains adequate comments.
Solution uses doc style comments and is self documenting.
Code Readability
Code is not easily readable or is not commented.
​
The names for variables, classes, and procedures are inconsistent and/or not meaningful.
​
Negligence of style guides.
Code is easily readable and necessarily commented.
​
The names for variables, classes, and procedures are consistent and/or meaningful.
​
Style Guides are adhered to.
​
​
Test Coverage
Solution did not attempt to use TDD
70% test coverage
100% test coverage or 0% test coverage like a Bawse.
Defense
Cannot clearly articulate why they did what they did or why certain portions of their code behaves in a certain way.
Does not understand underlying concepts/ Copied and pasted code.
Understands exactly what they did and is able to clearly communicate that.
In addition to knowing and explaining exactly what pieces of their code works, they can also articulate how the source code of libraries used influences code behavior.